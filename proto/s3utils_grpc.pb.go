// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/s3utils.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// S3ServiceClient is the client API for S3Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type S3ServiceClient interface {
	StoreFileS3(ctx context.Context, in *S3FileStoreRequest, opts ...grpc.CallOption) (*S3FileStoreResponse, error)
	GetFileS3(ctx context.Context, in *S3GetFileData, opts ...grpc.CallOption) (*S3ResponseFileData, error)
}

type s3ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewS3ServiceClient(cc grpc.ClientConnInterface) S3ServiceClient {
	return &s3ServiceClient{cc}
}

func (c *s3ServiceClient) StoreFileS3(ctx context.Context, in *S3FileStoreRequest, opts ...grpc.CallOption) (*S3FileStoreResponse, error) {
	out := new(S3FileStoreResponse)
	err := c.cc.Invoke(ctx, "/messaging_pb.S3Service/StoreFileS3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *s3ServiceClient) GetFileS3(ctx context.Context, in *S3GetFileData, opts ...grpc.CallOption) (*S3ResponseFileData, error) {
	out := new(S3ResponseFileData)
	err := c.cc.Invoke(ctx, "/messaging_pb.S3Service/GetFileS3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// S3ServiceServer is the server API for S3Service service.
// All implementations must embed UnimplementedS3ServiceServer
// for forward compatibility
type S3ServiceServer interface {
	StoreFileS3(context.Context, *S3FileStoreRequest) (*S3FileStoreResponse, error)
	GetFileS3(context.Context, *S3GetFileData) (*S3ResponseFileData, error)
	mustEmbedUnimplementedS3ServiceServer()
}

// UnimplementedS3ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedS3ServiceServer struct {
}

func (UnimplementedS3ServiceServer) StoreFileS3(context.Context, *S3FileStoreRequest) (*S3FileStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreFileS3 not implemented")
}
func (UnimplementedS3ServiceServer) GetFileS3(context.Context, *S3GetFileData) (*S3ResponseFileData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileS3 not implemented")
}
func (UnimplementedS3ServiceServer) mustEmbedUnimplementedS3ServiceServer() {}

// UnsafeS3ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to S3ServiceServer will
// result in compilation errors.
type UnsafeS3ServiceServer interface {
	mustEmbedUnimplementedS3ServiceServer()
}

func RegisterS3ServiceServer(s grpc.ServiceRegistrar, srv S3ServiceServer) {
	s.RegisterService(&S3Service_ServiceDesc, srv)
}

func _S3Service_StoreFileS3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(S3FileStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).StoreFileS3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messaging_pb.S3Service/StoreFileS3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).StoreFileS3(ctx, req.(*S3FileStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _S3Service_GetFileS3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(S3GetFileData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(S3ServiceServer).GetFileS3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messaging_pb.S3Service/GetFileS3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(S3ServiceServer).GetFileS3(ctx, req.(*S3GetFileData))
	}
	return interceptor(ctx, in, info, handler)
}

// S3Service_ServiceDesc is the grpc.ServiceDesc for S3Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var S3Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messaging_pb.S3Service",
	HandlerType: (*S3ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreFileS3",
			Handler:    _S3Service_StoreFileS3_Handler,
		},
		{
			MethodName: "GetFileS3",
			Handler:    _S3Service_GetFileS3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/s3utils.proto",
}
